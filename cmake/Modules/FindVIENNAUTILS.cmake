   

include(FindPackageHandleStandardArgs)
find_package(PkgConfig)


# INCLUDE PART
FIND_PATH(VIENNAUTILS_INCLUDE_DIR viennautils/version.hpp ${VIENNAUTILS_INC_DIR})
# ... include base directory and external directory ..
set(VIENNAUTILS_INCLUDE_DIRS ${VIENNAUTILS_INCLUDE_DIR} ${VIENNAUTILS_INCLUDE_DIR}/external)
find_package_handle_standard_args(VIENNAUTILS_INC DEFAULT_MSG VIENNAUTILS_INCLUDE_DIR)
MARK_AS_ADVANCED(VIENNAUTILS_INCLUDE_DIR)
IF( NOT VIENNAUTILS_INC_FOUND )
   IF( VIENNAUTILS_FIND_REQUIRED ) 
      message(FATAL_ERROR "ViennaUtils Include directory has not been found")
   ENDIF( VIENNAUTILS_FIND_REQUIRED )
ENDIF( NOT VIENNAUTILS_INC_FOUND )


#
# LIBRARY PART
#

IF( BUILD_SHARED_LIBS )
   set(CMAKE_FIND_LIBRARY_SUFFIXES ".so;.a;.dylib")
ELSE( BUILD_SHARED_LIBS )
   set(CMAKE_FIND_LIBRARY_SUFFIXES ".a;.so;.dylib")
ENDIF( BUILD_SHARED_LIBS )


FIND_LIBRARY(VIENNAUTILS_LIBRARY NAMES libpugixml pugixml PATHS ${VIENNAUTILS_LIB_DIR})
find_package_handle_standard_args(VIENNAUTILS_LIB DEFAULT_MSG VIENNAUTILS_LIBRARY)
MARK_AS_ADVANCED(VIENNAUTILS_LIBRARY)
SET(VIENNAUTILS_LIBRARIES ${VIENNAUTILS_LIBRARY})
IF( NOT VIENNAUTILS_LIB_FOUND )
   IF( VIENNAUTILS_FIND_REQUIRED ) 
      message(FATAL_ERROR "ViennaUtils library has not been found")
   ENDIF( VIENNAUTILS_FIND_REQUIRED )
ENDIF( NOT VIENNAUTILS_LIB_FOUND )

# GENERAL PART
IF(VIENNAUTILS_INC_FOUND)
   IF(VIENNAUTILS_LIB_FOUND)
      SET(ENABLE_VIENNAUTILS ON)
   ENDIF(VIENNAUTILS_LIB_FOUND)
ENDIF(VIENNAUTILS_INC_FOUND)

