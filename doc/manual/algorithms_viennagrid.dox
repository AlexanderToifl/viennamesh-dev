/**

\page manual-page-algorithms-viennagrid ViennaGrid Algorithms

\tableofcontents

\section section-algorithm-make-line-mesh 1D Line Mesh Generator

This algorithm generates a 1D line mesh based on a boundary representation, which is in case of a one dimensional space a set of points.

TODO: picture source -> destination

\subsection section-algorithm-make-line-mesh-inputs 1D Line Mesh Generator Inputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented and non-segmented brep 1d mesh supported</td> </tr>
<tr> <td>seed_points</td> <td>seed_point_1d_container</td> <td>A container of seed points with corresonding segment names</td> </tr>
<tr> <td>hole_points</td> <td>point_1d_container</td> <td>A container of hole points</td> </tr>
<tr> <td>cell_size</td> <td>double</td> <td>The desired maximum size of tetrahedrons, all tetrahedrons will be at most this size</td> </tr>
<tr> <td>use_different_segment_for_unknown_segments</td> <td>bool</td> <td>Determines, if different segments should be used for elements with unkonwn segment or if the should all be assigned to one segment</td> </tr>
<tr> <td>extract_segment_seed_points</td> <td>bool</td> <td>Should seed points be extracted from the input segmentation?</td> </tr>
<tr> <td>relative_min_geometry_point_distance</td> <td>double</td> <td>Relative value for checking if two close points should be merged</td> </tr>
<tr> <td>absolute_min_geometry_point_distance</td> <td>double</td> <td>Absolute value for checking if two close points should be merged, overwrites relative_min_geometry_point_distance</td> </tr>
</table>

\subsection section-algorithm-make-line-mesh-outputs 1D Line Mesh Generator Outputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, segmented line 1d</td> </tr>
</table>



\section section-algorithm-affine-transform Affine Transform

Transforms a mesh based on a affine transformation represented by matrix and a translation vector.

TODO: picture source -> destination

\subsection section-algorithm-affine-transform-inputs Affine Transform Inputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented line 2d mesh, segmented line 3d mesh, segmented triangular 2d mesh, segmented triangular 3d mesh and segmented tetrahedral 3d mesh supported</td> </tr>
<tr> <td>matrix</td> <td>dynamic_point</td> <td>The linear transformation matrix</td> </tr>
<tr> <td>translate</td> <td>dynamic_point</td> <td>The translation matrix</td> </tr>

</table>

\subsection section-algorithm-affine-transform-outputs Affine Transform Outputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, same type of mesh as input mesh</td> </tr>
</table>



\section section-algorithm-extract-boundary Extract Boundary

Extracts the boundary of a volume mesh, for example extracting the triangular hull of tetrahedral volume mesh.

TODO: picture source -> destination

\subsection section-algorithm-extract-boundary-inputs Extract Boundary Inputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented and non-segmented triangular 2d mesh and segmented and non-segmented tetrahedral 3d mesh supported</td> </tr>

</table>

\subsection section-algorithm-extract-boundary-outputs Extract Boundary Outputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, line 2d for triangular 2d input, triangular 3d for tetrahedral 3d input</td> </tr>
<tr> <td>seed_points</td> <td>seed_point_2d_container|seed_point_3d_container</td> <td>The output mesh, line 2d for triangular 2d input, triangular 3d for tetrahedral 3d input</td> </tr>
<tr> <td>hole_points</td> <td>point_2d_container|point_3d_container</td> <td>Extracted hole points</td> </tr>
</table>



\section section-algorithm-extract-plc Extract PLC Boundary Representation Geometry

Extract the boundary representation geometry, represented by a PLC, from a 3D triangular hull.

\subsection section-algorithm-extract-plc-inputs Extract PLC Boundary Representation Geometry Inputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented triangular 3d mesh supported</td> </tr>
</table>

\subsection section-algorithm-extract-plc-outputs Extract PLC Boundary Representation Geometry Outputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, plc 3d mesh</td> </tr>
</table>



\section section-algorithm-hyperplane-clip Hyperplane Clip

This algorithm removes all elements on the positive side of a hyperplane. Elements, which intersect the hyperplane, are cut and the sub-elements on the positive side of the hyperplane are removed. The hyperplane is represented by a point of the hyperplane and the normal vector which points to the positive side.

TODO: picture source -> destination

\subsection section-algorithm-hyperplane-clip-inputs Hyperplane Clip Inputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented and non-segmented triangular 2d, segmented and non-segmented triangular 3d and segmented and non-segmented tetrahedral 3d supported</td> </tr>
<tr> <td>hyperplane_point</td> <td>dynamic_point</td> <td>A point of the clipping hyperplane</td> </tr>
<tr> <td>hyperplane_normal</td> <td>dynamic_point</td> <td>The normal vector of the clipping hyperplane</td> </tr>
</table>

\subsection section-algorithm-hyperplane-clip-outputs Hyperplane Clip Outputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, same type of mesh as input mesh</td> </tr>
</table>



\section section-algorithm-laplace-smooth Laplacian Smooth

This algorithm smooths all vertices based on a laplacian smoothing, the smoothing parameter and the number of smoothing steps can be specified. Vertices, which are on any mesh or segment boundary, are not altered.

TODO: picture source -> destination

\subsection section-algorithm-laplace-smooth-inputs Laplacian Smooth Inputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented triangular 2d mesh and segmented tetrahedral 3d mesh supported</td> </tr>
<tr> <td>lambda</td> <td>double</td> <td>Smoothing parameter</td> </tr>
<tr> <td>iteration_count</td> <td>int</td> <td>Indicates, how many iterations should be performed</td> </tr>
</table>

\subsection section-algorithm-laplace-smooth-outputs Laplacian Smooth Outputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, same type of mesh as input mesh</td> </tr>
</table>



\section section-algorithm-seed-point-segmenting Seed Point Segmenting

This algorithm adds 3D triangles to segments based on seed points and also calculates the triangles orientation for the segment. Currently, there is no check and guarantee that all elements are assigned to at least one segment if there are segments which are not identified by any seed point.

\subsection section-algorithm-seed-point-segmenting-inputs Seed Point Segmenting Inputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented and non-segmented triangular 3d supported</td> </tr>
<tr> <td>seed_points</td> <td>seed_point_3d_container</td> <td>The seed points for segment identification</td> </tr>
</table>

\subsection section-algorithm-seed-point-segmenting-outputs Seed Point Segmenting Outputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, segmented oriented triangular 3d</td> </tr>
</table>



\section section-algorithm-map-segments Map Segments

This algorithm re-maps/renames mesh segments.

TODO: picture source -> destination

\subsection section-algorithm-map-segments-inputs Map Segments Inputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented triangular 2d mesh, segmented triangular 3d mesh, segmented quadrilateral 2d mesh, segmented quadrilateral 3d mesh, segmented tetrahedral 3d mesh and segmented hexahedral 3d mesh supported</td> </tr>
<tr> <td>segment_mapping</td> <td>string_string_map</td> <td>A mapping of segments, each entry maps a segment to another</td> </tr>
</table>

\subsection section-algorithm-map-segments-outputs Map Segments Outputs

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, same type of mesh as input mesh</td> </tr>
</table>



\section section-algorithm-merge-meshes Merge Meshes

This algorithm merges two meshes to a single mesh.

TODO: picture source -> destination

\subsection section-algorithm-merge-meshes-inputs Merge Meshes

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh0</td> <td>mesh</td> <td>The first input mesh, segmented triangular 2d mesh, segmented triangular 3d mesh, segmented quadrilateral 2d mesh, segmented quadrilateral 3d mesh, segmented tetrahedral 3d mesh and segmented hexahedral 3d mesh supported</td> </tr>
<tr> <td>mesh1</td> <td>mesh</td> <td>The second input mesh, segmented triangular 2d mesh, segmented triangular 3d mesh, segmented quadrilateral 2d mesh, segmented quadrilateral 3d mesh, segmented tetrahedral 3d mesh and segmented hexahedral 3d mesh supported</td> </tr>
</table>

\subsection section-algorithm-merge-meshes-outputs Merge Meshes

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The output mesh, same type of mesh as input mesh</td> </tr>
</table>



\section section-algorithm-make-statistic Make Statistic

This algorithm make a statistic of a mesh based on an element metric. The following metrics are supported:
  - aspect ratio
  - condition number
  - min angle
  - max angle
  - min dihedral angle
  - radius edge ratio

\subsection section-algorithm-make-statistic-inputs Make Statistic

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>mesh</td> <td>mesh</td> <td>The input mesh, segmented triangular 2d and segmented tetrahedral 3d supported</td> </tr>
<tr> <td>metric_type</td> <td>string</td> <td>The metric type for which the statistic should be created. Supported metric types: aspect_ratio, condition_number, min_angle, max_angle, min_dihedral_angle, radius_edge_ratio</td> </tr>
<tr> <td>histogram_bins</td> <td>point</td> <td>Explicit histogram bin borders</td> </tr>
<tr> <td>histogram_min</td> <td>double</td> <td>The lower value of the histogram interval</td> </tr>
<tr> <td>histogram_max</td> <td>double</td> <td>The upper value of the histogram interval</td> </tr>
<tr> <td>histogram_bin_count</td> <td>double</td> <td>The number of histogram bins within the interval</td> </tr>
</table>

\subsection section-algorithm-make-statistic-outputs Make Statistic

<table>
<tr> <td><b>Name</b></td> <td><b>Type</b></td> <td><b>Description</b></td> </tr>
<tr> <td>statistic</td> <td>statistic</td> <td>The output statistic</td> </tr>
</table>

*/
