

/**

\page manual-page-installation    Installation

The necessary steps for compiling and running the various examples in ViennaMesh are outlined for several different platforms in the following.
Although we run nightly tests on various platforms, we cannot check every possible combination of hardware, operating system, and compiler.
If you experience any trouble, do not hesitate to ask for help at our mailinglist: viennamesh-support@lists.sourceforge.net

\section Dependencies
To simplify installation, the required dependencies for using ViennaMesh are kept as small as possible:

<table>
<tr><td> A recent C++ compiler </td><td> GCC version 4.2.x or above, Clang 3.0 or above, and Visual C++ 2005 or above are known to work.</td></tr>
<tr><td> <a href="http://viennagrid.sourceforge.net">ViennaGrid</a> </td><td> The ViennaGrid sources are included in the ViennaMesh package, no separate installation required. </td></tr>
</table>

Moreover, the following optional components are necessary to unleash the full potential of ViennaMesh:

<table>
<tr><td> <a href="http://www.cmake.org/">CMake</a>     </td><td> Using CMake as a build system makes it easy to configure your builds appropriately. </td></tr>
</table>


\section Generic-Installation Generic Installation

If ViennaMesh is to be used as a standalone executable meshing tool with XML file-based
control, type

    $> cd /your-ViennaMesh-path/build/

Execute

    $> cmake ..

to obtain a Makefile and type

    $> make vmesh

to build the standalone executable.

If ViennaMesh is used as a meshing library, it is sufficient to copy the source folders
src/, include/, and viennagrid/ either into your project folder or
to your global system include path. If ViennaGrid is already
installed on your system, the respective folder can be skipped.

On Unix-like operating systems, the global system include path is usually /usr/include/ or /usr/local/include/.
On Windows, the situation strongly depends on your development environment.
We advise to consult the documentation of the compiler on how to set the include path correctly.
With Visual Studio 9.0 this is usually something like C:\\Program Files\\Microsoft Visual Studio 9.0\\VC\\include and can be set in Tools -> Options -> Projects and Solutions -> VC++-Directories.

  \section manual-installation-exa Building the Examples

For building the examples, we suppose that CMake is properly set up on your system.
The instructions for the various operating systems are as follows

  \subsection manual-installation-linux Linux

To build the examples, open a terminal and change to:

    $> cd /your-ViennaMesh-path/build/

Execute

    $> cmake ..

to obtain a Makefile and type

    $> make

to build the examples and the standalone executable. If desired, one can build each example separately instead:

    $> make tetgen_mesher      #builds the tetgen_mesher example

You may speed up the building process by using multiple concurrent jobs, e.g. make -j4.


  \subsection manual-installation-mac  Mac OS X

For the GCC compiler the Xcode \cite xcode package has to be installed. To install CMake, external portation
tools such as Fink \cite fink, DarwinPorts \cite darwinports, or MacPorts \cite macports have to be used.

The build process of ViennaMesh is similar to Linux.

  \subsection manual-installation-windows  Windows

  TODO!!!!

In the following the procedure is outlined for Visual Studio: Assuming that CMake is
already installed, Visual Studio solution and project files can be created using CMake:
    - Open the CMake GUI.
    - Set the ViennaSHE base directory as source directory.
    - Set the build/ directory as build directory.
    - Click on ’Configure’ and select the appropriate generator (e.g. Visual Studio 9 2008)
    - Click on 'Configure' again
    - Click on ’Generate’
    - The project files can now be found in the ViennaSHE build directory, where they can be opened and compiled with Visual Studio (provided that the include and library paths are set correctly.

Note that the examples should be executed from the build/ folder in order to access the correct input files.


*/
