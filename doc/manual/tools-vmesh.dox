/**

\page manual-page-tools-vmesh    ViennaMesh VMesh

\tableofcontents

The ViennaMesh VMesh tool provides a pipeline mechanism which manages and executes multiple algorithms. A pipeline is configured by an XML file. The syntax of the XML file is presented here:

\code{.xml}
<algorithm id="..." name="...">
  <parameter name="..." type="...">...</parameter>
</algorithm>

<algorithm id="..." name="...">
  <default_source>...</default_source>
  <parameter name="..." type="...">...</parameter>
</algorithm>
\endcode

The algorithm type is specified by its id (see \ref section-list-of-algorithms for algorithm ids) and identified within the pipeline by its name. An algorithm name must be unique within a pipeline. Each algorithm has an optional default_source, which specifies the name of another algorithm which is the default source. Parameters can be specified using the parameter XML tag, each parameter requires a name, which is identical to the corresponding input parameter name of the algorithm, and a type. The following types are allowed in a pipeline XML file:

<table>
<tr> <td><b>Type</b></td> <td><b>Description</b></td> <td><b>Syntax</b></td> </tr>
<tr> <td>string</td> <td>A text string</td> <td></td> </tr>
<tr> <td>string_string_map</td> <td>A mapping from strings to strings</td> <td>from0,to0;from1;to2</td> </tr>
<tr> <td>bool</td> <td>A boolean, can be true or false</td> <td>true, false</td> </tr>
<tr> <td>int</td> <td>An integer</td> <td></td> </tr>
<tr> <td>point</td> <td>A dynamic point/vector of arbitrary length</td> <td>(x,y,z,w)</td> </tr>
<tr> <td>xml</td> <td>A XML structure</td> <td></td> </tr>
<tr> <td>dynamic</td> <td>A path to the output parameter of another algorithm.</td> <td>[algorithm_name]/[parameter_name]</td> </tr>
</table>

\section section-tools-vmesh-example A VMesh XML example

A simple pipeline configuration file is presented here:

\code{.xml}
<algorithm id="mesh_reader" name="input">
  <parameter name="filename" type="string">../data/big_and_small_cube.poly</parameter>
</algorithm>

<algorithm id="tetgen_make_mesh" name="mesher">
  <default_source>input</default_source>

  <parameter name="cell_size" type="double">0.1</parameter>
</algorithm>

<algorithm id="hyperplane_clip" name="clip">
  <parameter name="mesh" type="dynamic">mesher/mesh</parameter>

  <parameter name="hyperplane_point" type="point">(0,0,10)</parameter>
  <parameter name="hyperplane_normal" type="point">(0,1,1)</parameter>
</algorithm>

<algorithm id="mesh_writer" name="output">
  <default_source>clip</default_source>

  <parameter name="filename" type="string">clipped_bla.vtu</parameter>
</algorithm>
\endcode

At first, a mesh reader algorithm is used to load a mesh file. The second algorithm, a Tetgen mesher, takes the output of the first one by using the default source (the input parameter is no explicitly specified so the default source is tried). Additionally the cell size is explicit set to 0.1. The third algorithm, a hyperplane clipping algorithm, explicitly links its input parameter "mesh" to the output parameter "mesh" from the Tetgen mesher algorithm with the name mesh. Additionally the hyperplane is specified using its point and normal vector. At last, a mesh writer algorithm saves the resulting mesh to the disk.

More pipeline examples can be found in the examples/pipelines directory.

\section section-tools-vmesh-usage Usage

\verbatim
USAGE:

   ./vmesh  [-l <string>] [--] [--version] [-h] <PipelineFile>


Where:

   -l <string>,  --logfile <string>
     Log file name (default is convert.log)

   --,  --ignore_rest
     Ignores the rest of the labeled arguments following this flag.

   --version
     Displays version information and exits.

   -h,  --help
     Displays usage information and exits.

   <PipelineFile>
     (required)  Pipeline file name


   ViennaMesh VMesh application, reads and executes a pipeline
\endverbatim

*/
