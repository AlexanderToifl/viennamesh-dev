IF(WITH_NETGEN)
  set(NETGEN_SOURCE_DIR ${EXTERNAL_SOURCE_DIR}/netgen/)

  file(GLOB NETGEN_CSG_SRC "${NETGEN_SOURCE_DIR}/libsrc/csg/*.cpp")
  list(REMOVE_ITEM NETGEN_CSG_SRC "${NETGEN_SOURCE_DIR}/libsrc/csg/csgpkg.cpp")
  list(REMOVE_ITEM NETGEN_CSG_SRC "${NETGEN_SOURCE_DIR}/libsrc/csg/vscsg.cpp")

  file(GLOB NETGEN_GENERAL_SRC "${NETGEN_SOURCE_DIR}/libsrc/general/*.cpp")

  file(GLOB NETGEN_GEOM2D_SRC "${NETGEN_SOURCE_DIR}/libsrc/geom2d/*.cpp")
  list(REMOVE_ITEM NETGEN_GEOM2D_SRC "${NETGEN_SOURCE_DIR}/libsrc/geom2d/vsgeom2d.cpp")
  list(REMOVE_ITEM NETGEN_GEOM2D_SRC "${NETGEN_SOURCE_DIR}/libsrc/geom2d/geom2dpkg.cpp")

  file(GLOB NETGEN_GPRIM_SRC "${NETGEN_SOURCE_DIR}/libsrc/gprim/*.cpp")
  file(GLOB NETGEN_INTERFACE_SRC "${NETGEN_SOURCE_DIR}/libsrc/interface/*.cpp")
  file(GLOB NETGEN_LINALG_SRC "${NETGEN_SOURCE_DIR}/libsrc/linalg/*.cpp")
  file(GLOB NETGEN_MESHING_SRC "${NETGEN_SOURCE_DIR}/libsrc/meshing/*.cpp")

  file(GLOB NETGEN_STLGEOM_SRC "${NETGEN_SOURCE_DIR}/libsrc/stlgeom/*.cpp")
  list(REMOVE_ITEM NETGEN_STLGEOM_SRC "${NETGEN_SOURCE_DIR}/libsrc/stlgeom/vsstl.cpp")
  list(REMOVE_ITEM NETGEN_STLGEOM_SRC "${NETGEN_SOURCE_DIR}/libsrc/stlgeom/stlpkg.cpp")

  SET(NETGEN_SRC ${NETGEN_CSG_SRC} ${NETGEN_GENERAL_SRC} ${NETGEN_GEOM2D_SRC} ${NETGEN_GPRIM_SRC} ${NETGEN_INTERFACE_SRC} ${NETGEN_LINALG_SRC} ${NETGEN_MESHING_SRC} ${NETGEN_STLGEOM_SRC} ${NETGEN_SOURCE_DIR}/nglib/nglib.cpp)

  SET(NETGEN_COMPILE_FLAGS "${LIBVIENNAMESH_COMPILE_FLAGS} -DPACKAGE_VERSION=5.1")
  include_directories(${NETGEN_SOURCE_DIR}/libsrc/include)

  set(THREADS_REQUIRED_FOR_LIB_VIENNAMESH TRUE PARENT_SCOPE)
  set(ZLIB_REQUIRED_FOR_LIB_VIENNAMESH TRUE PARENT_SCOPE)

  ADD_LIBRARY(viennamesh-netgen ${NETGEN_SRC})
  SET_TARGET_PROPERTIES(viennamesh-netgen PROPERTIES COMPILE_FLAGS "${NETGEN_COMPILE_FLAGS}")
endif(WITH_NETGEN)


IF(WITH_TETGEN)
  set(TETGEN_SOURCE_DIR ${EXTERNAL_SOURCE_DIR}/tetgen/)

  include_directories(${TETGEN_SOURCE_DIR})
  SET(TETGEN_SRC ${TETGEN_SOURCE_DIR}/tetgen.cxx ${TETGEN_SOURCE_DIR}/predicates.cxx)
  SET(TETGEN_COMPILE_FLAGS "${LIBVIENNAMESH_COMPILE_FLAGS} -DTETLIBRARY")

  ADD_LIBRARY(viennamesh-tetgen ${TETGEN_SRC})
  SET_TARGET_PROPERTIES(viennamesh-tetgen PROPERTIES COMPILE_FLAGS "${TETGEN_COMPILE_FLAGS}")
ENDIF(WITH_TETGEN)


IF(WITH_TRIANGLE)
  set(TRIANGLE_SOURCE_DIR ${EXTERNAL_SOURCE_DIR}/triangle/)

  include_directories(${TRIANGLE_SOURCE_DIR}/)
  SET(TRIANGLE_SRC ${TRIANGLE_SOURCE_DIR}/triangle.c ${TRIANGLE_SOURCE_DIR}/triangle_interface.c)
  SET(TRIANGLE_COMPILE_FLAGS "${LIBVIENNAMESH_COMPILE_FLAGS} -DTRILIBRARY -DANSI_DECLARATORS -DEXTERNAL_TEST")

  ADD_LIBRARY(viennamesh-triangle ${TRIANGLE_SRC})
  SET_TARGET_PROPERTIES(viennamesh-triangle PROPERTIES COMPILE_FLAGS "${TRIANGLE_COMPILE_FLAGS}")
ENDIF(WITH_TRIANGLE)
