#! /usr/bin/env python
# encoding: utf-8

VERSION='0.0.1'
APPNAME='hull_mesh_converter'  

top = '.'
out = 'build'

localtoolsdir = 'waftools/'

def options(ctx):
   ctx.load('g++')
   ctx.load('boost', tooldir=localtoolsdir)   

def configure(ctx):
   ctx.load('g++')
   ctx.check_boost()
   ctx.env.append_value('CXXFLAGS', ['-O2', '-fPIC'])

def build(ctx):

   #
   #  build the converter library
   #
   ctx(
      features     = 'cxx cxxstlib', 
      source       = 'src/gsse_converter/converter.cpp',
      target       = 'converter',
      name         = 'converter',
      includes     = '. src/gsse_converter/ \
         ../external/gssev02 ../external/gssev02/external',
      uselib       = 'BOOST'
   )

   #
   #  build the surface mesh library
   #
   ctx(
      features     = 'cxx cxxstlib', 
      source       = 'src/gsse_surface/delink_octree.cpp \
         src/gsse_surface/delink_inoutput.cpp \
         src/gsse_surface/callback.cpp \
         src/gsse_surface/delink_manage.cpp \
         src/gsse_surface/geocalc.cpp \
         src/gsse_surface/surface_manage.cpp \
         src/gsse_surface/surface_main.cpp ',
      target       = 'surface',
      name         = 'surface',
      includes     = '. src/gsse_surface/ includes/ \
         ../external/gssev02 ../external/gssev02/external',
      uselib       = 'BOOST',
      cxxflags     = ['-Wno-write-strings']
   )


   #
   #  build the hull mesh converter
   #
   ctx(
      features     = 'cxx cxxprogram', 
      source       = 'src/gsse_vgmodeler/gsse_converter.cpp src/gsse_vgmodeler/bnd2hin.cpp',
      target       = 'hull_converter',
      name         = 'hull_converter',
      includes     = '. ../external/gssev01 ../external/gssev01/external/phoenix_v2 \
         ../external/gssev01/external/mauch ../external/gssev01/external/fusion_v2_2006 \
         src/gsse_surface src/gsse_volume/include src/gsse_volume src/includes \
         src/gsse_vgmodeler/include \
         ../external/gssev02 ../external/gssev02/external',
      uselib       = 'BOOST',
      use          = 'converter surface',
      cxxflags     = ['-Wno-write-strings'],
      defines      = 'RELEASE'
   )








